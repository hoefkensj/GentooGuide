#!/usr/bin/env bash
# ############################################################################
# # PATH: /opt/local/config/rc/bash               AUTHOR: Hoefkens.j@gmail.com
# # FILE: 311_history.conf                                 2023-04-04 09:33:40
# ############################################################################
#
# set -o xtrace







function bash_history() {
 	function HELP() {
        echo -e "\nUsage: bash_history [option]\n"
        echo -e "Options:"
        echo -e "  install\tCreate the necessary directories and files for the history tracking"
        echo -e "  clean\t\tRemove the current session's history and reset the command history"
        echo -e "  start\t\tStart a new session and begin tracking commands"
        echo -e "  stop\t\tStop the current session and stop tracking commands"
        echo -e "  show [--all]\tDisplay the command history, use --all to show all history"
        echo -e "  active\tList active history sessions"
        echo -e "  orphaned\tList orphaned history sessions"
        echo -e "  help\t\tDisplay this help message\n"
        echo -e "Example: bash_history start\n"
	}
	function INSTALL() {

		
	}
	function history_cleanup() {
		local ACTIVEHISTFILES ACTIVESESSIONFILES
		# get orphaned files:
		local ACTIVE PATTERN HISTACTIVE
		ACTIVE=$(pgrep "$(ps -p $$ -o comm=)")
		PATTERN=$(for pid in $ACTIVE; do echo -n "-e .*(system|${pid}).* "; done)
		HISTACTIVE=$(ls $HISTDIR 2>/dev/null | grep -v $PATTERN|sort)
		for f in $HISTACTIVE; do
			printf '%s\n ' "$HISTDIR/$f"		
			# cat "$f" >> $HISTSYSFULL
			# trash -v "$f"
		done
	}
	function history_init(){
		local BOOT CACHE DIR SYSFULL SYSBOOT SYSUNIQ SYSMETA
		BOOT="$(uptime -s | tr -d '\-: ')" 
		# initialize persistent systemwide variables:
		CACHE="/var/cache"
		DIR="${CACHE}/history/bash"
		SYSLAST="${HISTDIR}/system.last.${HISTPFIX}"
		SYSBOOT="${HISTDIR}/system.boot.${BOOT}"
		SYSFULL="${HISTDIR}/system.full.${HISTPFIX}"
		SYSUNIQ="${HISTDIR}/system.uniq.${HISTPFIX}"
		SYSMETA="${HISTDIR}/system.meta.${HISTPFIX}"
		
		#test for dirs/files and create them:
		[[ ! -e $CACHE ]]   &&   mkdir -m777 "$CACHE" 
		[[ ! -e $DIR ]]     &&   mkdir -m777  "$DIR" 
		[[ ! -e $SYSFULL ]] &&   install -m 777 /dev/null "$SYSFULL" 	
		[[ ! -e $SYSBOOT ]] &&   install -m 777 /dev/null "$SYSBOOT" 	
		[[ ! -e $SYSUNIQ ]] &&   install -m 777 /dev/null "$SYSUNIQ"
		[[ ! -e $SYSMETA ]] &&   install -m 777 /dev/null "$SYSMETA"
		[[ ! -e $SYSLAST ]] &&   install -m 777 /dev/null "$SYSLAST"

		HISTVARS="" # colonseparated list 
		[[ ":${HISTVARS}:" != *":BOOT="* ]]     && HISTARR=(	"BOOT=$BOOT" "${HISTARR[@]}")
		[[ ":${HISTVARS}:" != *":CACHE"* ]]     && HISTARR=(	"CACHE=$CACHE" "${HISTARR[@]}")
		[[ ":${HISTVARS}:" != *":DIR="* ]]      && HISTARR=(	"DIR=$DIR" "${HISTARR[@]}")
		[[ ":${HISTVARS}:" != *":SYSFULL="* ]]  && HISTARR=(	"SYSFULL=$SYSFULL" "${HISTARR[@]}")
		[[ ":${HISTVARS}:" != *":SYSLAST="* ]]  && HISTARR=(	"SYSLAST=$SYSLAST" "${HISTARR[@]}")
		[[ ":${HISTVARS}:" != *":SYSMETA="* ]]  && HISTARR=(	"SYSMETA=$SYSMETA" "${HISTARR[@]}")
		[[ ":${HISTVARS}:" != *":SYSUNIQ="* ]]  && HISTARR=(	"SYSUNIQ=$SYSUNIQ" "${HISTARR[@]}")

	}

	function history_session_prep()	{
 		install -m 777 /dev/null "$HISTSESSION"
		install -m 777 /dev/null "$HISTFILE"
	}
	function history_session_start()	{
		local STAMP
		history_session_prep

		# $FNC uniq "${HISTSYSFULL}" > "$HISTSYSUNIQ"
		touch $HISTSESSION
		touch $HISTFILE
		cat "$HISTSYSBOOT" > "$HISTFILE"
		builtin history -r "$HISTFILE"
	}
	function history_session_stop ()	{
		rm $HISTFILE 2>/dev/null
		rm $HISTSESSION 2>/dev/null
	}	
	function history_update()	{
		builtin history -a "$HISTLASTCMD"
		cat "$HISTLASTCMD" >> "$HISTSESSION"
		cat "$HISTLASTCMD" >>	"$HISTSYSFULL"
		cat "$HISTLASTCMD" >> "$HISTSYSBOOT"
		builtin history -c	
		cat "$HISTSYSBOOT" > "$HISTSYSUNIQ"
		cat "$HISTSESSION" >> "$HISTSYSUNIQ"
		cat "$HISTSYSUNIQ" | history_uniq > "$HISTFILE"
 		builtin history -r "$HISTFILE"

	}
	function history_uniq()	{
		tac  | awk '!seen[$0]++'  | tac |tee 
		# awk '{ lines[NR] = $0 } END { for(i=NR;i>=1;i--) if(!seen[lines[i]]++) rev[++j] = lines[i]; for(k=j;k>=1;k--) print rev[k] }' "$1" 
	}
	function history_active(){
		local ACTIVE PATTERN HISTACTIVE
		function history_sessions_active ()	{
			ACTIVE=$(pgrep "$(ps -p $$ -o comm=)")
			PATTERN=$(for pid in $ACTIVE; do echo -n "-e .*session*\.${pid}.* "; done)
			HISTACTIVE=$(ls $HISTDIR 2>/dev/null | grep $PATTERN|sort)
			for f in $HISTACTIVE; do
				printf '%s\n ' "$HISTDIR/$f"		
			done
		}
		function history_histfiles_active ()	{
			ACTIVE=$(pgrep "$(ps -p $$ -o comm=)")
			PATTERN=$(for pid in $ACTIVE; do echo -n "-e .*session*\.${pid}.* "; done)
			HISTACTIVE=$(ls $HISTDIR 2>/dev/null | grep $PATTERN|sort)
			for f in $HISTACTIVE; do
				printf '%s\n ' "$HISTDIR/$f"		
			done
		}
		history_sessions_active
		history_histfiles_active
		unset -f history_sessions_active history_histfiles_active
	}
	function history_show()	{
		builtin history -c	
		install -m 777 /dev/null "$HISTSYSUNIQ"
		install -m 777 /dev/null "$HISTFILE"
		cat "$HISTSYSFULL" >> "$HISTFILE"
		cat "$HISTSYSBOOT" >> "$HISTFILE"
		cat "$HISTSESSION" >> "$HISTFILE"
		cat "$HISTFILE" | history_uniq > "$HISTSYSUNIQ"
		cat "$HISTSYSUNIQ" | history_uniq > "$HISTFILE"

		builtin history -r "$HISTFILE"
		
	}
	function history_id() 	{		
		local dat usr hst pid tty
		_date=$( printf '%s' "$( date +%s )" )
		_user=$( printf '%s' "$USER" )
		_host=$( printf '%s' "$HOSTNAME" )
		_ppid=$( printf '%s' "$$" )
		_tty=$( printf '%s' "$$" )
		
		printf '#<ID>  %s    %s@%s : %s </ID>#' "$NR" "$dat" "$usr" "$hst" "$tty" 
	}
	function cleanup(){
		# functions
		unset -f  HELP history_install history_cleanup history_session_prep 
	}
	## HELPER FUNCTION if not on system:
	if [[ -z $(which batcat) ]]; then 
		function batcat ()
		{
			local _cat _bat LANG STRING COLOR
			LANG="$1"
			shift 1
			STRING="$@"
			_cat=$( which "cat" )
			_bat=$( which "bat" )
			[[ -n "$_bat" ]] && printf '%s' "$@"  | $( printf '%s --%s --%s=%s' "$_bat" "plain" "language" "$LANG" ) 
			[[ -z $_bat ]] && echo $( printf '%s' "$@" ) | $( printf '%s' "$_cat"  ) 
		};
	fi	

	local FNC HISTPFIX DATE BOOT APID HISTACTIVE HISTDATE HISTBOOT HISTPFIX 
	local HISTCACHEDIR HISTSYSUNIQ HISTSYSBOOT

	FNC=${FUNCNAME[0]}
	HISTDATE="$( date +%s )"




	HISTCACHEDIR="/var/cache"
	HISTDIR="${HISTCACHEDIR}/history/bash"
	HISTLASTCMD="${HISTDIR}/system.last.${HISTPFIX}"
	HISTFILE="${HISTDIR}/${HISTPFIX}.$$"
	HISTSESSION="${HISTDIR}/${HISTPFIX}.session.$$"
	HISTSYSBOOT="${HISTDIR}/${HISTPFIX}.boot.${HISTBOOT}"
	HISTSYSFULL="${HISTDIR}/system.full.${HISTPFIX}"
	HISTSYSUNIQ="${HISTDIR}/system.uniq.${HISTPFIX}"


	case "$1" in
		install) history_install ;;
		cleanup) history_cleanup ;;
		prep) history_session_prep ;;
		start) history_session_start ;;
		stop) history_session_stop ;;
		update) history_update ;;
		uniq) shift && history_uniq "$@" ;;
		active) history_active ;;
		orphaned) history_sessions_orphaned ;;
		show) shift  && history_show "$@" ;;
		stamp) history_date_stamp ;;
	esac
	cleanup

}	
function HISTCLEANUP() {
  echo "Cleaning up HIST files..."
  bash_history stop
  sleep 0.1
}

function HISTUPDATE() {
	bash_history update 
}
function history(){
	bash_history show
	builtin history "$@"
}
# PERSISTENT ENV VARS
## the ones required by builtin history
HISTSIZE=-1 
HISTFILESIZE="$HISTSIZE" 
HISTCONTROL=''
HISTFILE="${HISTDIR}/${HISTPFIX}.$$"
## the ones required by this script (array)
function variables(){
	local BOOT CACHEDIR DIR SYSFULL SYSMETA SYSUNIQ
	BOOT="$(uptime -s | tr -d '\-: ')" 

	STARTED="$( date +%s )"
	CACHE="/var/cache":
	DIR="${HISTCACHEDIR}/history/bash"
	LASTCMD="${HISTDIR}/system.last.${HISTPFIX}"
	SESSION="${HISTDIR}/${HISTPFIX}.session.$$"
	SYSBOOT="${HISTDIR}/${HISTPFIX}.boot.${HISTBOOT}"
	SYSFULL="${HISTDIR}/system.full.${HISTPFIX}"
	SYSUNIQ="${HISTDIR}/system.uniq.${HISTPFIX}"
	SYSMETA="${HISTDIR}/system.meta.${HISTPFIX}"
	# IF HISTVARS Exists use it:
	[[ -n "$HISTVARS" ]] && HISTARR=($(tr ':' '\n' <<< "$HISTVARS"))
	# IF NOT HISTVARS => INIT
	[[ ":${HISTVARS}:" != *":BOOT="* ]]     && HISTARR=(	"BOOT=$BOOT" "${HISTARR[@]}")
	[[ ":${HISTVARS}:" != *":CACHE"* ]]     && HISTARR=(	"CACHE=$CACHE" "${HISTARR[@]}")
	[[ ":${HISTVARS}:" != *":DIR="* ]]      && HISTARR=(	"DIR=$DIR" "${HISTARR[@]}")
	[[ ":${HISTVARS}:" != *":SYSNAME="* ]]  && HISTARR=(	"SYSFULL=$BOOT" "${HISTARR[@]}")
	[[ ":${HISTVARS}:" != *":SYSFULL="* ]]  && HISTARR=(	"SYSMETA=$BOOT" "${HISTARR[@]}")
	[[ ":${HISTVARS}:" != *":SYSUNIQ="* ]]  && HISTARR=(	"SYSUNIQ=$BOOT" "${HISTARR[@]}")
		HISTFILE="${HISTDIR}/${HISTPFIX}.$$"
	HISTSESSION="${HISTDIR}/${HISTPFIX}.session.$$"


		HISTLASTCMD="${HISTDIR}/system.last.${HISTPFIX}"

	HISTARR=(\
							 			"STARTED=$STARTED"\
							 			"CHACHEDIR=$CACHEDIR"\
							 			"DIR=$DIR"\
							 			"SYSFULL=$SYSFULL"\
							 			"SYSUNIQ=$SYSUNIQ"\
							 			"SYSMETA=$SYSMETA")							 			

}
HIST='''

'''

trap HISTCLEANUP  EXIT
bash_history start
[[ "${PROMPT_COMMAND}" != *"HISTUPDATE"* ]] && export PROMPT_COMMAND="HISTUPDATE ; ${PROMPT_COMMAND}"


